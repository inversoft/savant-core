/*
 * Copyright (c) 2014, Inversoft Inc., All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */
savantVersion = "0.1.0-{integration}"

project(group: "org.savantbuild", name: "savant-core", version: "0.1.0", license: "Apachev2") {
  workflow {
    standard()
  }

  dependencies {
    group(type: "compile") {
      dependency(id: "org.codehaus.groovy:groovy:groovy-all:2.2.1:jar")
      dependency(id: "org.savantbuild:savant-dependency-management:${savantVersion}")
      dependency(id: "org.savantbuild:savant-utils:${savantVersion}")
    }
    group(type: "test-compile", export: false) {
      dependency(id: "org.easymock:easymock:3.2")
      dependency(id: "org.testng:testng:6.8.7")
    }
  }

  publications {
    standard()
  }
}

dependency = loadPlugin(id: "org.savantbuild.plugin:dependency:${savantVersion}")

file = loadPlugin(id: "org.savantbuild.plugin:file:${savantVersion}")

idea = loadPlugin(id: "org.savantbuild.plugin:idea:${savantVersion}")
idea.settings.moduleMap = [
    "org.savantbuild:savant-dependency-management:${savantVersion}": "savant-dependency-management",
    "org.savantbuild:savant-utils:${savantVersion}": "savant-utils"
]

java = loadPlugin(id: "org.savantbuild.plugin:java:${savantVersion}")
java.settings.javaVersion = "1.8"

javaTestNG = loadPlugin(id: "org.savantbuild.plugin:java-testng:${savantVersion}")
javaTestNG.settings.javaVersion = "1.8"


target(name: "clean", description: "Cleans the project") {
  java.clean()
}

target(name: "compile", description: "Compiles the project") {
  java.compileMain()
  java.compileTest()
}

target(name: "jar", description: "JARs the project", dependsOn: ["compile"]) {
  java.jar()
}

target(name: "test", description: "Runs the project's tests", dependsOn: ["jar"]) {
  javaTestNG.test()
}

target(name: "int", description: "Releases a local integration build of the project", dependsOn: ["test"]) {
  dependency.integrate()
}

target(name: "bundle", description: "Generates the Tarball bundle", dependsOn: ["jar"]) {
  file.copy(to: "build/distributions/exploded/bin") {
    fileSet(dir: "src/main/scripts")
  }

  dependency.copy(to: "build/distributions/exploded/lib") {
    dependencies(group: "compile", transitive: true, transitiveGroups: ["provided", "compile", "runtime"])
    dependencies(group: "runtime", transitive: true, transitiveGroups: ["provided", "compile", "runtime"])
  }

  file.tar(file: "build/distributions/${project.name}-${project.version}.tar.gz") {
    tarFileSet(dir: "build/distributions/exploded", prefix: "savant-${project.version}")
  }
}

target(name: "release", description: "Releases the project", dependsOn: ["test", "bundle"]) {
  release.release()
}