import org.savantbuild.dep.DefaultDependencyService
import org.savantbuild.dep.DependencyService
import org.savantbuild.dep.graph.ResolvedArtifactGraph
import org.savantbuild.domain.Project
import org.savantbuild.runtime.BuildFailureException

import java.nio.file.*
import java.nio.file.attribute.BasicFileAttributes

class JavaLayout {
  def buildDir = Paths.get("build")
  def buildMainClassDir = buildDir.resolve("classes/main")
  def buildTestClassDir = buildDir.resolve("classes/test")
  def mainSrcDir = Paths.get("src/main/java")
  def mainResourceDir = Paths.get("src/main/resources")
  def testSrcDir = Paths.get("src/test/java")
  def testResourceDir = Paths.get("src/test/resources")
}

class JavaSettings {
  String version
  String compilerArguments = ""
  DependencyService.ResolveConfiguration mainDependencyResolveConfiguration = new DependencyService.ResolveConfiguration()
      .with("compile", new DependencyService.ResolveConfiguration.TypeResolveConfiguration(true, false))
  DependencyService.ResolveConfiguration testDependencyResolveConfiguration = new DependencyService.ResolveConfiguration()
      .with("compile", new DependencyService.ResolveConfiguration.TypeResolveConfiguration(true, false))
}

class JavaPlugin {
  def layout = new JavaLayout()
  def settings = new JavaSettings()
  def properties = new Properties()
  def project

  def JavaPlugin(Project project, Path propertiesFile) {
    this.project = project

    if (Files.isRegularFile(propertiesFile)) {
      propertiesFile.toFile().withInputStream { inputStream ->
        properties.load(inputStream)
      }
    } else {
      fail("You must create a file at [${propertiesFile}] that contains the system configuration for the Java plugin. " +
          "This file should include the location of the JDK (java and javac) by version. These properties look like this:\n\n" +
          "  1.6=/Library/Java/JavaVirtualMachines/1.6.0_65-b14-462.jdk/Contents/Home\n" +
          "  1.7=/Library/Java/JavaVirtualMachines/jdk1.7.0_10.jdk/Contents/Home\n" +
          "  1.8=/Library/Java/JavaVirtualMachines/jdk1.8.0.jdk/Contents/Home\n")
    }
  }

  def clean() {
    Path buildDir = project.directory.resolve(layout.buildDir)
    println "Cleaning ${buildDir}"
    if (!Files.isDirectory(buildDir)) {
      return
    }

    if (Files.isSymbolicLink(buildDir)) {
      Files.delete(buildDir);
    }

    Files.walkFileTree(buildDir, new SimpleFileVisitor<Path>() {
      public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
        Files.delete(dir);
        return FileVisitResult.CONTINUE;
      }

      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
        Files.delete(file);
        return FileVisitResult.CONTINUE;
      }
    })
  }

  def compileMain() {
    println "Compiling"
    Path javacPath = initialize()
    println "Javac ${javacPath}"
    String command = "${javacPath} ${settings.compilerArguments} ${classpath(settings.mainDependencyResolveConfiguration)} -sourcepath ${layout.mainSrcDir} -d ${layout.buildMainClassDir}"
    println "Executing ${command} in ${project.directory.toAbsolutePath()}"
    Files.createDirectories(project.directory.resolve(layout.buildMainClassDir))
    Process process = command.execute(new String[0], project.directory.toFile())
    process.consumeProcessOutput((Appendable) System.out, System.err)
    process.waitFor()
    if (!process.exitValue()) {
      fail("Build failed")
    }
  }

  def compileTest() {
    Path javacPath = initialize()
    String command = "${javacPath} ${settings.compilerArguments} ${classpath(settings.testDependencyResolveConfiguration)} -sourcepath ${layout.testSrcDir} -d ${layout.buildTestClassDir}"
    Process process = command.execute(new String[0], project.directory.toFile())
    process.consumeProcessOutput((Appendable) System.out, System.err)
    process.waitFor()
    if (!process.exitValue()) {
      fail("Build failed")
    }
  }

  def classpath(DependencyService.ResolveConfiguration resolveConfiguration) {
    if (!project.dependencies) {
      return ""
    }

    DependencyService service = new DefaultDependencyService()
    if (!project.artifactGraph) {
      def dependencyGraph = service.buildGraph(project.toArtifact(), project.dependencies, project.workflow)
      project.artifactGraph = service.reduce(dependencyGraph)
    }

    ResolvedArtifactGraph resolvedArtifactGraph = service.resolve(project.artifactGraph, project.workflow, resolveConfiguration)
    return "-classpath ${resolvedArtifactGraph.toClasspath()}"
  }

  def initialize() {
    if (!settings.version) {
      fail("You must configure the Java version to use with the settings object. It will look something like this:\n\n" +
          "  java.settings.version=\"1.7\"")
    }

    String javaHome = properties.getProperty(settings.version)
    if (!javaHome) {
      fail("No JDK is configured for version [${settings.version}]. You must configure the JDK locations in the " +
          "~/.savant/java-plugin.properties file. It will look something like this:\n\n" +
          "  1.6=/Library/Java/JavaVirtualMachines/1.6.0_65-b14-462.jdk/Contents/Home\n" +
          "  1.7=/Library/Java/JavaVirtualMachines/jdk1.7.0_10.jdk/Contents/Home\n" +
          "  1.8=/Library/Java/JavaVirtualMachines/jdk1.8.0.jdk/Contents/Home\n")
    }

    def javacPath = Paths.get(javaHome, "bin/javac")
    if (!Files.isExecutable(javacPath)) {
      fail("The javac compiler [${javacPath.toAbsolutePath()}] is not executable.")
    }

    return javacPath
  }

  static def fail(message) {
    throw new BuildFailureException(message)
  }
}



project(name: "test-project", group: "org.savantbuild.test", version: "0.1", license: "Commercial") {
  workflow {
    fetch {
      cache(dir: "${SYS['user.home']}/.savant/cache")
      url(url: "http://repository.savantbuild.org")
    }
    publish {
      cache(dir: "${SYS['user.home']}/.savant/cache")
    }
  }
}

def java = new JavaPlugin(project, Paths.get("${SYS['user.home']}/.savant/plugins/java.properties"))
java.settings.version = "1.7"

target(name: "clean", description: "Cleans the project") {
  java.clean()
}

target(name: "compile", description: "Compile the java") {
  java.compileMain()
//  java.compileTest()
}